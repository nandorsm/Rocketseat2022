existem dois momentos para se criar componentes no react:
1- Quando algo se repete muito em tela com mesmo visual e/ou comportamento
2- Quando se consegue tirar algo de um componente maior sem que ele pare de funcionar assim deixando o componente maior mais limpo e mais claro, facilitando na manutenção

intl.DateTimeFormat: formatação de datas



# Programação imperativa
    -O que deve ser feito (passo-a-passo)
    .receita de bolo

# Programação declarativa
    -Quais as condições para eu ter o resultado final.
    

# Key no react
## Porque Unica?
3 momentos em que um componente é renderizado novamente no React.

1. Quando o estado altera;
2. Quando a propriedade altera;
3. Qunado um componente pai renderiza novamente;

##Porque não posso usar o índice do array?
porque caso os itens da lista mudem apenas de lugar, o react vai entender que foi modificado todo o array e vai renderizar todos os elementos. Porque o índice referente ao item vai ser modificado por causa da sua posição. ou seja, os posts mudam de posição mas os índices não.
```js
const post = [1, 2, 5, 4, 3]
// 0, 1, 2, 3, 4
```


# Closures no React

func
```js
function handleLikeComment() {
    setLikeCount((state) => {
        return state + 1 //ele vai pegar o estado mais atual
    });
    setLikeCount((state) => {
        return state + 1 //ele vai pegar o estado mais atual
    });
    //assim o react não entra no Closure e vai executar a função duas vezes, assim somando de 2 em 2
}
// Sempre que for atualizar uma informação e essa informação depende do valor que ela tinha anteriormente, ou seja depende dela mesma, é sempre bom fazer a atualização utilizando esse padrão de funções